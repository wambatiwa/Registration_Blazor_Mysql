@page "/register/{StudentId:int}"
@inject NavigationManager Navigation
@inject IConfiguration config
@rendermode InteractiveServer

<PageTitle>Register Student</PageTitle>
<Heading Name="Register Student" Styles="mb-4 text-center bg-primary-subtle"/>

<p></p>

<h3 class="mt-4 link-primary">@student!.FirstName - @student.Id</h3>
<p>The Following Courses are available for registration:</p>
@foreach(var course in student.MyCourses)
{
    <div class="input-group mb-3 p-2 mx-4 border border-secondary-subtle ">
        <div class="input-group-text mx-2">
            <InputCheckbox type="checkbox" @bind-Value="course.IsChecked" class="form-check-input" id="course.Value"/>
        </div>
        <span>@course.Text</span>
    </div>
}
<div class="form-group mx-4">
    <button type="submit" class="btn btn-primary me-2" @onclick = "RegisterStudent" >Register Student</button>
    <a  class="btn btn-secondary "href="/">Cancel</a>
</div>


<p></p>


@code {
    
    [Parameter]
    public int StudentId {get;set;}
    @* private List<Course> courses = Helper.GetCourses();
    private List<Student> students = Helper.GetStudents();
    public string sucess = "hello";
    private void BackToStudent()
    {
        sucess ="Button well Clicked";
    } *@
    

    
    @* private Student? student;

    protected override void OnInitialized()
    {
        student = students.FirstOrDefault(s => s.Id == Id);
        if(student == null)
        {
            Navigation.NavigateTo("/");
        }
    } *@
    private DataService? ds;
    private List<Course> courses = [];
    private Student student = new();
    private List<int> idList = [];
    private CustomValidation? customValidation;
    private async Task<List<Course>> GetCoursesAsync()
    {
        var sql = "SELECT * FROM Course";
        return await ds!.LoadData<Course,dynamic>(sql,new{});
    }

    private async Task<List<int>> GetSelectedCoursesId(int studentId)
    {
        var sql = "SELECT CourseId FROM Registration WHERE StudentId = @Id";
        return await ds!.LoadData<int,dynamic>(sql,new{Id = studentId});
    }

    private async Task<List<int>> GetSelectedHours(int courseId)
    {
        var sql = "SELECT WeeklyHours FROM Course WHERE Id = @Id";
        return await ds!.LoadData<int, dynamic>(sql, new { Id = courseId });
    }
    private async Task<Student> GetStudentAsync(int id)
    {
        var sql = "SELECT * FROM Student WHERE Id = @Id";
        return await ds!.LoadSingleData<Student,dynamic>(sql,new{Id = id });
    }
    protected override async Task OnInitializedAsync()
    {
        ds = new(config.GetConnectionString("default")!);
        student = await GetStudentAsync(StudentId);
        ds = new(config.GetConnectionString("default")!);
        courses = await GetCoursesAsync();
        foreach(var c in courses)
        {
            student.MyCourses.Add(new CheckBoxItem{
                Text = c.ToString(),
                Value = c.Id,
                IsChecked = false
            });
        }
        idList = await GetSelectedCoursesId(StudentId);
        checkExistingCourses();
    }

    private List<int> getSelectedCourses() 
    {
        List<int> selectedCourse = [];
        foreach(var c in student.MyCourses)
        {
            if(c.IsChecked)
            {
                selectedCourse.Add(c.Value);
            }
        }
        return selectedCourse;
    }

    private async Task<int> getWeeklyHours()
    {
        int total;
        List<int> listHours = [];
        foreach(var c in student.MyCourses)
        {
            if(c.IsChecked)
            {
                listHours = await GetSelectedHours(c.Value);
            }
        }
        total = listHours.Sum();
        return total;
    }

    private void checkExistingCourses()
    {
        foreach(var c in student.MyCourses)
        {
            int course = c.Value;
            if(idList.Contains(course))
            {
                c.IsChecked = !c.IsChecked;
            }
        }
    }

    private async Task registerStudentAsync(int studentId, int courseId)
    {
        var sql = "INSERT INTO Registration(StudentId,CourseId) VALUES(@StudentId,@CourseId)";
        await ds!.SaveData(sql,new{StudentId = studentId, courseId = courseId });
        Console.WriteLine("Registration successfull");
    }

    private async Task RegisterStudent()
    {
        foreach(var c in student.MyCourses)
        {
            if(c.IsChecked)
            {
                await registerStudentAsync(student.Id,c.Value);
            }
        }
        Navigation.NavigateTo("/");
    }

    private async Task CustomValidation()
    {
        customValidation?.ClearErrors();
        var errors = new Dictionary<string,List<string>>();
        List<int> selectedCourses = getSelectedCourses();
        int totalHours = await getWeeklyHours();
        int totalCourses = selectedCourses.Count();

        switch(student.Type)
        {
            case "Full Time":
                if(totalHours > 16)
                {
                    errors.Add(nameof(student.Type), new() {"Full Time students can only register for a maximum of 16 hours per week"});
                }
                break;
            case "Part Time":
                if (totalCourses > 3)
                {
                    errors.Add(nameof(student.Type), new() { "Part Time students can only register for a maximum of 3 courses" });
                }
                break;
            case "Coop":
                if (totalCourses > 2 || totalHours > 4)
                {
                    errors.Add(nameof(student.Type), new() { "Coop students can only register for a maximum of 2 courses and a maximum of 4 hours per week" });
                }
                break;
        }
        if(errors.Any())
        {
            customValidation?.DisplayErrors(errors);
        }
        else
        {
            await RegisterStudent();
        }
    }

}
